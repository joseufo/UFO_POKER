this.startGameTimer = this.PluginHost.CreateTimer(new Action(this.StartGame),this.PluginHost.GameProperties[(object)"countdownBegin"] == null? 90000 : int.Parse(                      this.PluginHost.GameProperties[(object)"countdownBegin"].ToString()
                        ) * 1000,
                    500
                );







        public override string Name => "ServerPlugin";



        private Dictionary<IActor, PlayerData> DPlayersData = new Dictionary<IActor, PlayerData>();
        private Dictionary<string, int> playerScores = new Dictionary<string, int>();
        

        private IPluginLogger pluginLogger;

        private object startGameTimer;
        private int roomTotalPlayer=0, roundPlayerCount=0;
        private int initStartTime = 5000; //60000
        //private IPluginHost pluginHost;
        const int maxPlayers = 5, minPlayers = 1;

        // to clients-
        const byte TIMERGAMESTART = 101, ROUNDSTART = 105, ADDROOMPLAYERS = 111;
        //to server
        const byte REGPLAYER = 11, CALL = 22, CHECK = 23, FOLD=25, RAISE = 20;

        private bool gameStarted=false, roundInProgress=false;

        private IList<int> currentRoundActors = (IList<int>)new List<int>();
        public override bool SetupInstance(IPluginHost host, Dictionary<string, string> config, out string errorMsg)
        {

            this.pluginLogger = host.CreateLogger(this.Name);
            return base.SetupInstance(host, config, out errorMsg);
        }

        float m_timeStamp;
        public override void OnCreateGame(ICreateGameCallInfo info)
        {

            
            info.Continue(); // same as base.OnCreateGame(info);
            IList<IActor> currentActors = this.PluginHost.GameActors;
            this.pluginLogger.InfoFormat("\n\n OnCreateGame {0} by user {1} - Actor  \n...................\n", info.Request.GameId, info.UserId);
            this.pluginLogger.InfoFormat("\n\n Creator- {0}  \n", currentActors[0].ActorNr);
            //playerScores.Add(info.UserId, 0);           

        }
        public override void BeforeJoin(IBeforeJoinGameCallInfo info)
        {
            info.Continue();

            this.pluginLogger.InfoFormat("\n\n Player BeforeJoin CALLED in {0} - user {1} \n...................\n", info.Request.GameId, info.UserId);
        }
        
        public override void OnJoin(IJoinGameCallInfo info)
        {
            
            info.Continue();

            this.pluginLogger.InfoFormat("\n\n Player Joined in {0} - user {1} \n...................\n", info.Request.GameId, info.UserId);
        }
        Dictionary<byte, object> generalData = new Dictionary<byte, object>();
        int roundCount;

        List<Card> currentRoundCard = new List<Card>();
        List<Card> TableCards = new List<Card>();
        private void StartPokerRound()
        {
            this.pluginLogger.InfoFormat("\n PokerRound Started {0}  \n", roundCount++);
            roundInProgress = true;
            this.currentRoundCard = InitCardsAndShuffle();
            string tableCardString="";
            for(int i=0; i<5; i++)
            {
                var card = TakeCardFromDeck(ref currentRoundCard);
                tableCardString += card + ", ";
                TableCards.Add(card);
            }
            this.pluginLogger.InfoFormat("\n Table Cards {0},   \n", tableCardString);
            IList<int> temPlayer = new List<int>();

            foreach (var actor in DPlayersData.Keys)
            {
                temPlayer.Clear();
                temPlayer.Add(actor.ActorNr);
                currentRoundActors.Add(actor.ActorNr);
                var playerData = DPlayersData[actor];
                
                playerData.card1data = TakeCardFromDeck(ref currentRoundCard);
                playerData.card2data = TakeCardFromDeck(ref currentRoundCard);
                this.pluginLogger.InfoFormat("\n ActorPlayer {0} Cards: {1}, {2}   \n", actor.ActorNr, playerData.card1data, playerData.card2data);
                //Dictionary<int, int> suitvalue = new Dictionary<int, int>();
                //suitvalue[playerData.card1data.suit] = playerData.card1data.rank; suitvalue[playerData.card2data.suit] = playerData.card2data.rank;
                int[] playerCardData = new int[4]; playerCardData[0] = playerData.card1data.suit; playerCardData[1]=playerData.card1data.rank; playerCardData[2] = playerData.card2data.suit; playerCardData[3] = playerData.card2data.rank;
                this.generalData[(byte)2] = playerCardData;
                this.PluginHost.BroadcastEvent(temPlayer, 0, ROUNDSTART, this.generalData, (byte)0);
            }
            //this.PluginHost.BroadcastEvent((byte)0, 0, (byte)0, ROUNDSTART, this.generalData, (byte)0);
            //this.PluginHost.BroadcastEvent(currentRoundActors, 0, ROUNDSTART, this.generalData, (byte)0);

        }
        int currentSeatPos=-1;
        Dictionary<int, int> DActorPositon = new Dictionary<int, int>();
        public override void OnRaiseEvent(IRaiseEventCallInfo info)
        {

            if (info.Request.EvCode == REGPLAYER)
            {
                currentSeatPos++;
                DActorPositon[info.ActorNr] = currentSeatPos;
                PlayerData tPlayerData = new PlayerData();
                tPlayerData.playerPosition = currentSeatPos;
                IActor actorPlayer = GetActor(info.ActorNr);
                actorPlayer.Properties.SetProperty((object)"positon", (object)currentSeatPos);

                DPlayersData.Add(actorPlayer, tPlayerData);
                IList<int> player = new List<int>();
                player.Add(info.ActorNr);
                this.generalData[(byte)1] = DActorPositon;
                this.PluginHost.BroadcastEvent(player, 0, ADDROOMPLAYERS, this.generalData, (byte)0);
                //foreach (IActor gameActor in this.PluginHost.GameActors)
                //{

                //}
                roomTotalPlayer++;
                if (roundInProgress)
                    return;

                
                if(!gameStarted && roomTotalPlayer>=minPlayers)
                {
                    this.generalData.Clear();
                    m_timeStamp = (float)Environment.TickCount; //[PhotonNetwork.ServerTimestamp]
                    this.generalData[(byte)2] = (object)(m_timeStamp);                    
                    this.generalData[(byte)3] = (m_timeStamp + initStartTime);
                    this.PluginHost.BroadcastEvent((byte)0, 0, (byte)0, TIMERGAMESTART, this.generalData, (byte)0);
                    //this.startGameTimer = this.PluginHost.CreateTimer(new Action(this.StartGame), 20000, 500);

                    this.startGameTimer = this.PluginHost.CreateOneTimeTimer(null, new Action(this.StartPokerRound), initStartTime);

                    //this.PluginHost.BroadcastEvent((byte)0, (byte)0, (byte)0, STARTGAME, this.sendInfo, (byte)0);
                    
                }
                
            }

            if (info.Request.EvCode == 5)
            {
                string playerId = info.UserId;
                int points = (int)info.Request.Data;
                this.pluginLogger.InfoFormat("{0} -Raisevent data", points);
                if (!playerScores.ContainsKey(playerId))
                {
                    playerScores[playerId] = 0;
                }

                playerScores[playerId] += points;
                this.generalData[(byte)0] = (object)playerScores[playerId];

                Dictionary<byte, object> sendInfo = new Dictionary<byte, object>();
                //sendInfo.Add(101, "Player" + info.ActorNr + "SendDAta");

                this.PluginHost.BroadcastEvent((byte)0, (byte)0, (byte)0, (byte)12, this.generalData, (byte)0);

                //BroadcastEvent(10, sendInfo);
            }
        }

        private IActor GetActor(int x)
        {
            foreach (IActor gameActor in (IEnumerable<IActor>)this.PluginHost.GameActors)
            {
                if (gameActor.ActorNr == x)
                    return gameActor;
            }
            return (IActor)null;
        }

        public Card TakeCardFromDeck(ref List<Card> CardDeck)
        {
            var card = CardDeck[0];
            CardDeck.RemoveAt(0);
            return card;
        }
        //










